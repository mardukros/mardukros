name: Generate Roadmap Issues

on:
  schedule:
    - cron: "0 9 * * 1"  # Run every Monday at 9 AM UTC
  workflow_dispatch:  # Allow manual triggering
    inputs:
      dry_run:
        description: 'Dry run mode (only log issues, do not create them)'
        required: false
        default: 'false'
        type: boolean

jobs:
  generate-issues:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
    
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Parse Roadmap and Create Issues
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Read the roadmap file
            const roadmapPath = 'wiki/development/node-llama-cpp-roadmap.md';
            const roadmapContent = fs.readFileSync(roadmapPath, 'utf8');
            
            // Parse deliverables from the roadmap
            function parseDeliverables(content) {
              const lines = content.split('\n');
              const deliverables = [];
              let currentPhase = null;
              let currentSection = null;
              
              for (let i = 0; i < lines.length; i++) {
                const line = lines[i].trim();
                
                // Detect phase headers
                if (line.match(/^### Phase \d+:/)) {
                  currentPhase = line.replace('### ', '').split('(')[0].trim();
                }
                
                // Detect deliverables section
                if (line === '**Deliverables:**') {
                  currentSection = 'deliverables';
                  continue;
                }
                
                // Reset section on new header
                if (line.startsWith('**') && line.endsWith(':**') && line !== '**Deliverables:**') {
                  currentSection = null;
                }
                
                // Parse unchecked deliverables
                if (currentSection === 'deliverables' && line.startsWith('- [ ]')) {
                  const title = line.replace('- [ ]', '').trim();
                  if (title && currentPhase) {
                    deliverables.push({
                      title,
                      phase: currentPhase,
                      lineNumber: i + 1
                    });
                  }
                }
              }
              
              return deliverables;
            }
            
            // Create issue for deliverable
            async function createIssueForDeliverable(deliverable) {
              const phaseNumber = deliverable.phase.match(/Phase (\d+)/)?.[1] || '0';
              const labels = ['roadmap', 'node-llama-cpp', `phase-${phaseNumber}`];
              
              // Add priority labels based on phase
              if (phaseNumber === '1') labels.push('priority-high');
              else if (phaseNumber === '2') labels.push('priority-medium');
              else if (phaseNumber === '3') labels.push('priority-medium');
              else if (phaseNumber === '4') labels.push('priority-low');
              
              const issueTitle = `[${deliverable.phase}] ${deliverable.title}`;
              const issueBody = `
            ## Deliverable from Node-llama-cpp Roadmap
            
            **Phase:** ${deliverable.phase}
            **Source:** [node-llama-cpp-roadmap.md](https://github.com/${context.repo.owner}/${context.repo.repo}/blob/main/wiki/development/node-llama-cpp-roadmap.md#L${deliverable.lineNumber})
            
            ### Description
            ${deliverable.title}
            
            ### Context
            This deliverable is part of the comprehensive integration of the node-llama-cpp inference engine into the Marduk AGI Framework.
            
            ### Acceptance Criteria
            - [ ] Implementation completed
            - [ ] Tests added/updated
            - [ ] Documentation updated
            - [ ] Review completed
            - [ ] Integration verified
            
            ### Related Phase
            ${deliverable.phase}
            
            ---
            *This issue was automatically generated from the roadmap. Please update the roadmap file when this task is completed.*
            `;
              
              return {
                title: issueTitle,
                body: issueBody,
                labels: labels
              };
            }
            
            // Check if issue already exists
            async function issueExists(title) {
              try {
                const issues = await github.rest.issues.listForRepo({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  state: 'all',
                  labels: 'roadmap'
                });
                
                return issues.data.some(issue => issue.title === title);
              } catch (error) {
                console.log('Error checking existing issues:', error);
                return false;
              }
            }
            
            // Main execution
            const deliverables = parseDeliverables(roadmapContent);
            const dryRun = '${{ github.event.inputs.dry_run }}' === 'true';
            
            console.log(`Found ${deliverables.length} unchecked deliverables`);
            
            if (dryRun) {
              console.log('DRY RUN MODE - Issues will not be created');
            }
            
            let created = 0;
            let skipped = 0;
            
            for (const deliverable of deliverables) {
              const issueData = await createIssueForDeliverable(deliverable);
              const exists = await issueExists(issueData.title);
              
              if (exists) {
                console.log(`⏭️  Skipping existing issue: ${issueData.title}`);
                skipped++;
                continue;
              }
              
              if (dryRun) {
                console.log(`🔍 Would create issue: ${issueData.title}`);
                console.log(`   Labels: ${issueData.labels.join(', ')}`);
                continue;
              }
              
              try {
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: issueData.title,
                  body: issueData.body,
                  labels: issueData.labels
                });
                
                console.log(`✅ Created issue #${issue.data.number}: ${issueData.title}`);
                created++;
                
                // Add a small delay to avoid rate limiting
                await new Promise(resolve => setTimeout(resolve, 1000));
              } catch (error) {
                console.log(`❌ Failed to create issue: ${issueData.title}`);
                console.log(`   Error: ${error.message}`);
              }
            }
            
            console.log(`\n📊 Summary:`);
            console.log(`   Total deliverables found: ${deliverables.length}`);
            console.log(`   Issues created: ${created}`);
            console.log(`   Issues skipped (already exist): ${skipped}`);
            
            if (created > 0) {
              console.log(`\n🎉 Successfully created ${created} new roadmap issues!`);
            }